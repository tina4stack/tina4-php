
<p>
<strong>Create Post Route using Tina4*
Your form will need to be secure by using the POST ROUTE which looks as follows and will need a FORM KEY token to validate

\Tina4\Post::add (“/test/post”, function(\Tina4\Response $response, 
\Tina4\Request $request) {
  return $response (“Hello {$request→param[“someInput”]}!”);
});  

====== The Route of It ======

Tina4 supports 2 types of routes, those created in code and those that are assumed based on files you drop in the </strong>src/templates<strong> folder.

===== Dynamic Routing Using Files in src/templates =====

Consider the following folder structure and the routes you can hit up in the browser.

  * src/templates/index.html →  <a href="http://localhost:7145/" class="urlextern" title="http://localhost:7145/" rel="ugc nofollow">http://localhost:7145/</a> or <a href="http://localhost:7145/index" class="urlextern" title="http://localhost:7145/index" rel="ugc nofollow">http://localhost:7145/index</a>
  * src/templates/store/index.html → <a href="http://localhost:7145/store" class="urlextern" title="http://localhost:7145/store" rel="ugc nofollow">http://localhost:7145/store</a> or <a href="http://localhost:7145/store/index" class="urlextern" title="http://localhost:7145/store/index" rel="ugc nofollow">http://localhost:7145/store/index</a>
  * src/templates/store/shop.html → <a href="http://localhost:7145/store/shop" class="urlextern" title="http://localhost:7145/store/shop" rel="ugc nofollow">http://localhost:7145/store/shop</a>
</p>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:1,&quot;range&quot;:&quot;0-&quot;} --><div class="wrap_center wrap_round wrap_info plugin_wrap">
<p>
You can use either .twig or .html extensions. The html extension will cause the built in Tina4 template engine to be used.
</p>
</div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:2,&quot;range&quot;:&quot;0-&quot;} -->
<p>


===== Coded Routing in src/routes with subfolders =====

The folders are simply suggested folders where you can place php files to manage your routing.  Any php file place in the routing folder and sub folders will automatically be parsed and run when Tina4 is hit up.

Try placing the following code in a php file of your choice in the routes folder

  &lt;?php
  
  \Tina4\Get::add (“/test/route”, function(\Tina4\Response $response) {
    return $response (“Hello World!”);
  });

Test it by hitting up <a href="http://localhost:7145/test/route" class="urlextern" title="http://localhost:7145/test/route" rel="ugc nofollow">http://localhost:7145/test/route</a>  

A route with inline parameters can be composed as follows
  
  \Tina4\Get::add (“/test/route/{name}”, 
  function($name, \Tina4\Response $response) {
    return $response (“Hello {$name}!”);
  });

</strong>A POST ROUTE looks as follows and will need a FORM KEY token to validate<strong>

  &lt;?php
  
  \Tina4\Post::add (“/test/post”, function(\Tina4\Response $response, 
  \Tina4\Request $request) {
    return $response (“Hello {$request→param[“someInput”]}!”);
  });


</strong> Routing directly to a class
</p>
<pre class="code"> \Tina4\Get::add(&quot;/test&quot;, [&quot;TestClass&quot;, &quot;someRouter&quot;]);
 
 class TestClass
 {
     public function someRouter (\Tina4\Response $response, 
     \Tina4\Request $request) {
        return $response(&quot;Hello&quot;);
     }
 }</pre>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:3,&quot;range&quot;:&quot;0-&quot;} --><div class="wrap_center wrap_round wrap_info plugin_wrap">
<p>
On twig templates you can add this simple filter to include a formToken for you as a hidden input
</p>
<pre class="code">{{ &quot;reason for token&quot; | formToken | raw }}</pre>

<p>
Alternatively  you can use the twig global variable
</p>
<pre class="code">{{formToken}}  </pre>
</div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:4,&quot;range&quot;:&quot;0-&quot;} -->