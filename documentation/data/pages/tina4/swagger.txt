====== Swagger UI / Open API ======

As mentioned in [[tina4:basic-api|Basic API]], Tina uses [[https://swagger.io/solutions/api-documentation/|Swagger]] & [[https://swagger.io/specification/|OpenAPI]] UI. It is highly recommended you annotate your code for flexibility.

As an example, if someone else were to look and your code, would they be able to read it and add/make changes?

===== Basic Annotation for a Route =====

You can annotate your [[:tina4:routing|Route]]. Check this basic example below.

**Example:**

<code php route-annotation-example.php>
<?php

/**
* @description A description for your end point
* @summary A basic annotation for a Route with a "Hello World" response
* @tags 
*/
//Standard
\Tina4\Get::add("/hello/world", function(\Tina4\Response $response, \Tina4\Request $request){  
    return $response("Hello World", HTTP_OK, TEXT_HTML);
});
</code>

===== Basic Annotation for an ORM object or class =====

Perhaps you would like to annotate your[[:tina4:orm|ORM object]]. Check this basic example below.

**Example:**

<code php route-annotation-example-3.php>
<?php

/**
* @description An example of a basic ORM annotation
* @summary A basic annotation for a Route with a "Hello World" response
* @tags
*/
class User extends \Tina4\ORM { //assumes we have a table user in the database
    public $id; //primary key because it is first
    public $name; //some additional data
}

$user = (new User());
$user->name = "Test Save";
$user->save();
</code>

===== Annotation for referencing a table with Swagger =====

To reference a table using Swagger, we make use of the **@Table** annotation, which describes the table your record/data exists in. A required attribute of **@Table** is the name of the table.

This is done to provide a sort of hint to the database schema tools. This will serve essential in the initial steps of your project, as you will need to plan and setup your database according to your project requirements.

** Example:**

<code php route-annotation-example-2.php>
<?php

/**
 * @User
 * @description Reference table for User Class to extend to Tina4 ORM
 * @Table(name="user")
 */
class User extends \Tina4\ORM { //assumes we have a table "user" in the database
    public $id; //primary key because it is first
    public $name; //some additional data
}

$user = (new User());
$user->name = "Test Save";
$user->save();
</code>

===== Annotate your ORM objects and its values =====

The better you annotate, the better it may be for your database Schema and for future readability and context of what the code is about.

** Example:**

<code php route-annotation-example-5.php>
<?php

/**
 * @User
 * @description Reference table for User Class to extend to Tina4 ORM
 * @Table(name="user")
 */
class User extends \Tina4\ORM { //the table we want to query
    /**
    *  @var id integer auto_increment
    **/
    public $id; //primary key because it is first
    /**
    *  @var varchar(100) default 'Default Name'
    **/
    public $name; //some additional data
}

$user = (new User());
$user->name = "Test Save";
$user->save();
</code>

=== Test ===
Next spin up a Web-Server and go to this address in your browsers URL bar to bring up the Swagger UI: 

<code url>
 http://localhost:(your_port_number)/swagger  
</code>
 
Once, you spin up a web-server and hit up that address you will see the Swagger UI:

{{ :tina4:api3.png?nolink }}




















===== Annotation for an ORM public variable with various optional constraints =====

Your records/data which are represented as public variables can have various optional constraints.

<code php route-annotation-example-3.php>
<?php

/**
* @description An example of a basic ORM annotation
* @summary A basic annotation for a Route with a "Hello World" response
* @tags
*/
class User extends \Tina4\ORM { //assumes we have a table user in the database
    /**
    *  @var id integer auto_increment
    **/
    public $id; //primary key because it is first
    /**
    *  @var varchar(100) default 'Default Name'
    **/
    public $name; //some additional data
}

$user = (new User());
$user->name = "Test Save";
$user->save();
</code>