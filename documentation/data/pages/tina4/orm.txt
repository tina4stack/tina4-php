====== ORM ======

The [[https://en.wikipedia.org/wiki/Object-relational_mapping|ORM]] in Tina4 tries to be as light as possible on coding, the basic form uses the object name to map to the table and assumes the first public variable you declare is the primary key.

ORM is used to map object relations and how they interact with each other, for your app/webpage/system.  

===== Save a record using the ORM =====

To save a record/data to the database using ORM, it is required that you extend the **\Tina4\ORM** class to make the magic happen.

Create your ORM classes and objects in the **\src\ORM** directory.

** Example:**

<code php orm-example.php>
<?php

//we need a class extending the ORM
class User extends \Tina4\ORM { //assumes we have a table user in the database
    public $id; //primary key because it is first
    public $name; //some additional data
}   

$user = (new User());
$user->name = "Test Save";
$user->save();

//We want the table to be made for us
class NewTable extends \Tina4\ORM {

    //will be created as newtable in the database

    /**
    *  @var id integer auto_increment  
    **/
    public $id; //primary key because it is first
    /**
    *  @var varchar(100) default 'Default Name'
    **/
    public $name; //some additional data
} 

$newTable = (new NewTable());
$newTable->name = "Test Save";
$user->save();

//How about something else?
$newTable = (new NewTable('{"name":"TEST"}'));
$newTable->save();

//Or maybe something more different?
$fields = ["name" => "Testing"];
$newTable = (new NewTable($fields));
$newTable->save();

//Or something else - request variable should obviously 
//contain fields that match the class declared
$newTable = (new NewTable($_REQUEST));
$newTable->save();
</code>

===== Other methods using the ORM =====

Tina4 can make use of various types of methods.

** Example:**

<code php orm-example-2.php>
<?php

//Standard
\Tina4\Get::add("/hello/world", function(\Tina4\Response $response, \Tina4\Request $request){  
    return $response("Hello World", HTTP_OK, TEXT_HTML);
});

//Inline Params
\Tina4\Get::add("/hello/world/{id}", function($id, \Tina4\Response $response, \Tina4\Request $request){
    return $response("Hello World {$id}", HTTP_OK, TEXT_HTML);
});

//Other methods you can test
\Tina4\Post::add(...);

\Tina4\Patch::add(...);

\Tina4\Put::add(...);

\Tina4\Delete::add(...);

//You guessed it - It takes every method - GET, POST, DELETE, PUT, PATCH, OPTIONS
\Tina4\Any::add(...);
</code>

===== Referencing a table using ORM =====

To reference a table using ORM, we make use of the **@Table** annotation, which describes the table your record/data exists in. A required attribute of **@Table** is the name of the table.

This is done to provide a sort of hint to the database schema tools. This will serve essential in the initial steps of your project, as you will need to plan and setup your database according to your project requirements.

** Example:**

<code php orm-example-3.php>
<?php

/**
 * @User
 * @description Reference table for User Class to extend to Tina4 ORM
 * @Table(name="user")
 */
class User extends \Tina4\ORM { //assumes we have a table "user" in the database
    public $id; //primary key because it is first
    public $name; //some additional data
}

$user = (new User());
$user->name = "Test Save";
$user->save();
</code>

Optional attributes you may want to include to reference a table are indexes, unique constraints and schema.

  * Indexes - An index is an on-disk data structure which is associated with a table or a view that speeds up the retrieval of rows or data from the table/database/view.

  * Unique Constraints - This is used in SQL to ensure that no duplicate entries or values are created in your database. In SQL you can use the **UNIQUE** or **PRIMARY KEY** statement to create a constraint. The difference is that you can have many UNIQUE constraints per table but only one PRIMARY KEY constraint per table.

  * Schema -  These are the blueprints of your database which describe your database structure, data types and database constraints.

** Example:**

<code php orm-example-4.php>
<?php

/**
 * @User
 * @description Reference table for User Class to extend to Tina4 ORM
 * @Table(name="user",
 *      uniqueConstraints={@UniqueConstraint(name="user_name",columns={"username"})},
 *      indexes={@Index(name="user_id", columns={"name"})}
 *      schema="schema_name"
 * )
 */
class User extends \Tina4\ORM { //assumes we have a table "user" in the database
    public $id; //primary key because it is first
    public $name; //some additional data
}

$user = (new User());
$user->name = "Test Save";
$user->save();
</code>