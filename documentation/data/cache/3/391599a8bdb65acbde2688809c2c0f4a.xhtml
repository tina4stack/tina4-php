
<p>
<a class="link-external link-combo" href="https://tina4.com" rel="noopener" target="target=_blank"><img class="img-fluid lazy-raster-combo lazy-combo raster-combo" data-src="http://localhost:8800/lib/exe/fetch.php?media=wiki:logo.png" data-placeholder-background="#fff" alt=" Tina4" height="124" width="200" style="max-width:200px;width:100%"/></a>
</p>

<p>
<strong>Getting Started</strong>
</p>
<ul>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="first-steps" href="/doku.php?id=first-steps" title="Get up and running quickly with Docker if you want to preview Tina4 quickly without adding additional dependencies to your operating system. Please take a look at the Setting up your Environment section to get all the prerequisites required for Tina4.">First Steps</a> - Installing</div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:basic-routing" href="/doku.php?id=tina4:basic-routing" title="Tina4 supports 2 types of routes, those created in code and those that are assumed based on files you drop in the src/templates folder. Dynamic Routing Using Files in src/templates Consider the following folder structure and the routes you can hit up in the browser. (LQPP)">The Route of It</a> - Routing</div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:basic-website" href="/doku.php?id=tina4:basic-website" title="Tina4 uses &lt;https://twig.symfony.com/doc/3.x/&gt; template engine, so creating a website is one of the easiest things you can do.  Start off by creating an index.twig file in the src/templates folder. If you hit up the default URL &lt;http://localhost:7145&gt; then you will see a blank page. (LQPP)">Basic Website</a> - Twig</div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:basic-api" href="/doku.php?id=tina4:basic-api" title="Creating API 's With Tina4 API    Follow the steps below if you need to create an API end point to define the interactions between multiple software. This will be required as your application, system or webpage will require multiple interactive systems communicating with each other. Your">Basic <abbr title="Application Programming Interface">API</abbr> </a> - Open <abbr title="Application Programming Interface">API</abbr></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:basic-debugging" href="/doku.php?id=tina4:basic-debugging" title="A topic that is probably not covered enough. If you do not have debugging working in your IDE environment then you are sadly wasting a lot of your own time. A debugger allows you to step through problem code and figure out what is going wrong without adding all those die(), var_dump() and print_r() statements. (LQPP)">Debugging</a> - Debugging</div>
</li>
</ul>

<p>
<strong> Beginner </strong>
</p>
<ul>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:down-the-rabbit-hole" href="/doku.php?id=tina4:down-the-rabbit-hole" title="OS    Download and install &lt;https://code.visualstudio.com/download&gt; or &lt;https://www.jetbrains.com/phpstorm/download/#section=windows&gt;  Download and install &lt;https://git-scm.com/downloads&gt;  Install PHP7.3 or greater with the minimum required extensions - php  Install Composer - composer  Install OpenSSL - openSSL                 We should have the basics now to start developing in PHP">Down the Rabbit Hole</a> - Learning</div>
</li>
</ul>

<p>
<strong>How do I </strong>
</p>
<ul>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:tutorials:beginner" href="/doku.php?id=tina4:tutorials:beginner" title="initialize-a-tina4-project  create-a-landing-page  create-a-basic-route  debug-twig-template  let-a-class-use-the-database  connect-to-database  write-an-update-or-insert-statement  post-form-data  migrationless (LQPP)">Beginner</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:tutorials:advanced" href="/doku.php?id=tina4:tutorials:advanced" title="create-migration    build-class-with-db-access    save-a-record-with-orm    map_my_orm_object_to_a_table_with_another_name    map_my_orm_field_to_a_database_field_which_doesn_t_follow_the_tina4_pattern    secure_api_endpoint    filter-database-results    exlude-fields-from-rest-api-results    query-database    get-an-array-orm    create-rest-endpoint    one-rest-endpoint-two-names    custom-twig-filters &hellip;">Advanced</a></div>
</li>
</ul>

<p>
<strong>Reference</strong>
</p>
<ul>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:introduction:directories" href="/doku.php?id=tina4:introduction:directories" title="As you know by now Tina4 is not a Framework. There are some general conventions we used to make things more consistent. You can use all parts of Tina4 or only some parts.  What makes Tina4 different from Frameworks you may have used is how compact its code base is. Tina also has quick ways of doing things like generating ORM Objects from your database.">Directory Structure</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:env" href="/doku.php?id=tina4:env" title="When you're doing your magic, you will find that variables and constants are important components. There will be constants, variables and spells that you don't want exposed (e.g. contact numbers, domain manes, email addresses, passwords and URLS). (LQPP)">Setup your .Env file</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:routing" href="/doku.php?id=tina4:routing" title="Please see the Create-a-basic-route for more basics on Routes. For further information on routing, please click on this &lt;https://en.wikipedia.org/wiki/Routing&gt;. Simple Syntax The simple syntax of a Route is as follows   So the Route to capture the URL &lt;https://mywebsite.com/starthere&gt; would be as below. This uses a Get">Routing</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:database" href="/doku.php?id=tina4:database" title="Connecting to a Database For more dynamic websites, there is a strong chance a Database will be required. Tina4 currently supports 3 database types: The database connection is established in a global variable called $DBA in the index.php file for convenience, you could put it anywhere as long as it is global and required before any database functionality is required. For testing purpose, you can use the SQLite database type below.">Database</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:migrations" href="/doku.php?id=tina4:migrations" title="Create a table/migration You want to create a table for the database? Migrations are sequential &lt;https://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_1001.htm&gt; which keep track of your database changes. We recommend using migrations especially when you want to apply changes to a running system or when working in a team.">Migrations</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:orm" href="/doku.php?id=tina4:orm" title="The &lt;https://en.wikipedia.org/wiki/Object-relational_mapping&gt; in Tina4 tries to be as light as possible on coding, the basic form uses the object name to map to the table and assumes the first public variable you declare is the primary key.  is used to map object relations and how they interact with each other, for your app/webpage/system. (LQPP)">ORM</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:templates" href="/doku.php?id=tina4:templates" title="Basic Hello World in Tina4  in Tina4 are written in &lt;https://twig.symfony.com/doc/3.x/&gt;. Tina4 exposes some common globals into the twig template so please make note of these, if you are worried security use the following env config to remove them The globals map as follows: (LQPP)">Templates</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:messenger" href="/doku.php?id=tina4:messenger" title="can send email using PHP's built-in mail() function or &lt;https://github.com/PHPMailer/PHPMailer&gt;. This is a PHP built-in function that you can add to you project to handle messages or emails. This is beneficial as we don't need to write out the intense technical functions and server instructions/interactions ourselves.">Sending Emails</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:services" href="/doku.php?id=tina4:services" title="Running Background Tasks - Tina4 Service Tina4 includes a way to define &lt;https://en.wikipedia.org/wiki/Service_(systems_architecture)&gt; that will run in the background. This allows you to execute code without having to define CRON jobs. Simply put, services are the functions and instructions you will create that handle the requests and responses for the retrieval of information between servers.">Running Background Tasks - Tina4 Service</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:shape" href="/doku.php?id=tina4:shape" title="HTML Define Your Dependencies Put a file named composer.json at the root of your project, containing your project dependencies:  Install Composer Run this in your IDE terminal to install Composer: You can also have a look at the composer guide.">Generate <abbr title="HyperText Markup Language">HTML</abbr> with Shape</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:swagger" href="/doku.php?id=tina4:swagger" title="API As mentioned in basic-apiAPI, Tina uses &lt;https://swagger.io/solutions/api-documentation/&gt; &amp; &lt;https://swagger.io/specification/&gt; UI. It is highly recommended to annotate your code for flexibility. As an example, if someone else were to look and your code, would they be able to read it and add/make changes? A simple way to annotate routers:">Swagger</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:generatecrud" href="/doku.php?id=tina4:generatecrud" title="Tina4 has a unique way to generate &lt;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&gt; routes for you for use in your API. Let me show you how I create an API route for a Users ORM class. Create an ORM Class for your Table first if you have not done so yet. Step 1 - Create file (LQPP)">Generate Crud Routes</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:modules" href="/doku.php?id=tina4:modules" title="When creating your App or Website, we use modules which contains one or more functions. Examples of modules can include libraries, your app or webpage and classes/objects.  For example, your system might need to deal with various (LQPP)">Modules</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:debug" href="/doku.php?id=tina4:debug" title="A topic that is probably not covered enough. If you do not have debugging working in your IDE environment then you are sadly wasting a lot of your own time. A debugger allows you to step through problem code and figure out what is going wrong without adding all those die(), var_dump() and print_r() statements. (LQPP)">Debug Tina4</a> </div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:auth" href="/doku.php?id=tina4:auth" title="Tina4 makes use of OpenSLL to assist with various security $requests and $responses. You can make use to this by adding { { &ldquo;tokenName&rdquo; | formToken | raw } } within your form tokens. This way you can ensure data between users and the servers are secure. (LQPP)">Tina4 Auth &amp; Custom Auth</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:test" href="/doku.php?id=tina4:test" title="Tina4 has a built in testing system, to assist with test driven development. It utilizes both composer scripts and phpDoc Comments as part of the testing system. A wise Wizard once said, &ldquo;If you cannot test your code, then why are you creating the piece of code it in the first place? (LQPP)">Tina4 Test</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:cms" href="/doku.php?id=tina4:cms" title="Tina4 &lt;https://en.wikipedia.org/wiki/Content_management_system&gt;CMS is a module written with Tina4. Here is what you get out of the box:  Page driven CMS - Each page can be a landing for content or customized to your project design specifications  Articles - Articles are easily created, categorized and displayed on pages (LQPP)"><abbr title="Content Management System">CMS</abbr></a></div>
</li>
</ul>

<p>
<strong>Troubleshooting</strong>
</p>
<ul>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="trouble:install" href="/doku.php?id=trouble:install" title="'tina4' is not recognized as an internal or external command, operable program or batch file. This error could be caused by using a substandard terminal. We recommend changing the terminal in your IDE to use the gitbash terminal. eg. In PHPStorm: Files (LQPP)">Installation Problems</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:clear-cache" href="/doku.php?id=tina4:clear-cache" title="Tina4 is heavily &lt;https://en.wikipedia.org/wiki/Cache_(computing)&gt; and this leads to blazingly fast loading times. By default, the cache clears every 360 seconds for templates and every 60 seconds on ORM data. While in development you may need to clear cache at times especially if you had routes that delivered 404 content. (LQPP)">Clearing Cache</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:database:orm-returns-null" href="/doku.php?id=tina4:database:orm-returns-null" title="Sometimes you may get no data back from an query-database. You'll see an error like this one below stating that there was no data returned. So how do we resolve this? Step 1 Check the terminal for any queries or output for errors">Orm Select returns Null array</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:database:connection-errors" href="/doku.php?id=tina4:database:connection-errors" title="You may have seen that in Tina4, if we require a Database, which is included via the index.php located in project root via the : What errors you may expect? If you experience any trouble connecting to the DB you can try troubleshoot the following: (LQPP)">Errors while connecting to the Database</a></div>
</li>
</ul>

<p>
<strong>Setting up your Environment</strong>
</p>
<ul>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="guides:install:php" href="/doku.php?id=guides:install:php" title="&lt;https://www.php.net/&gt; is an Open Source general-purpose scripting language used in software/web development. You need to have PHP7.1 or greater installed on the command line. Follow these instructions to install PHP on your system.  Install PHP Instructions">Install PHP</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="guides:install:composer" href="/doku.php?id=guides:install:composer" title="&lt;https://getcomposer.org/doc/00-intro.md&gt; is a library management tool for PHP and you should get familiar with it for your own projects. It allows you to easily add 3rd party functionality to your application without worrying dependencies. Composer can be used to automate processes like testing in your project. (LQPP)">Install Composer</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="guides:install:ide" href="/doku.php?id=guides:install:ide" title="You must have a code editor or tool which you will use to develop your website and use to debug. There are various IDE tools you can use to write code for your software or website,such as PHPStorm or Visual Studio Code.  Depending on your Operating Software, you will need to install the correct installer or files for your (LQPP)">Install an IDE</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="guides:install:openssl" href="/doku.php?id=guides:install:openssl" title="Tina4 uses OpenSSL for security key generation. It is a a toolkit used as a Security Layer protocols between a computer network and Internet servers. Follow these instructions to install OpenSSL on your system.  Linux or MacOS Users (LQPP)">Install OpenSSL</a></div>
</li>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:env" href="/doku.php?id=tina4:env" title="When you're doing your magic, you will find that variables and constants are important components. There will be constants, variables and spells that you don't want exposed (e.g. contact numbers, domain manes, email addresses, passwords and URLS). (LQPP)">Setup your .Env file</a></div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <a class="link-internal low-quality-page-combo link-combo" data-wiki-id="tina4:recommendations" href="/doku.php?id=tina4:recommendations" title="What to consider ? If you already have a good work flow up and running then you can skip this bit, however if you do not have an IDE which can do step by step debugging then I'd pause for a while and consider some of the thoughts here. (LQPP)">Recommendations</a></div>
</li>
</ul>

<p>
<strong>Community</strong>
</p>
<ul>
<li class="level1"><div class="li"> <a class="link-internal link-combo" data-wiki-id="tina4:suggested_topics" href="/doku.php?id=tina4:suggested_topics" title="A list of community suggested topics. Make a suggestion on our Slack channel. TODO  introduction  debug  auth  error-pages  connection-errors  database  slimsHTML  modules  swaggerAPI  connection-errors  test  messenger  apiAPI  apiAPI  apiAPI  other_methods_using_the_orm -- There's a lot mapping but not so much load, delete, select, hasOne, hasMany, softDelete, Auto Generate Primary key, Auto Generate ORM files, et&hellip;">Suggested Topics</a></div>
</li>
</ul>
