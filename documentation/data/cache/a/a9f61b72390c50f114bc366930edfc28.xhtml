
<h1 class="sectionedit1 heading-combo" id="tina4helperjs">Tina4helper.js</h1>
<div class="level1">

<p>
Tina4PHP includes a helper library that wraps the Jquery calls needed to do the most common Ajax requests on your page. 
</p>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:2,&quot;range&quot;:&quot;0-&quot;} --><div class="wrap_center wrap_round wrap_info plugin_wrap" style="width: 100%;">
<p>
tina4helper.js functions are located in /src/public/js/tina4helper.js
</p>
</div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:3,&quot;range&quot;:&quot;0-&quot;} -->
</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Tina4helper.js&quot;,&quot;hid&quot;:&quot;tina4helperjs&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-262&quot;} -->
<h2 class="sectionedit4 heading-combo" id="using_loadpage_to_load_an_api_route">Using loadpage() to load an <abbr title="Application Programming Interface">API</abbr> route</h2>
<div class="level2">

<p>
The loadpage() function in Tina4helper.js makes a Get query to any route you specify. By convention we generally put these routes under /api/ in our routes files. But this will work with any route you specify.
</p>

<p>
So loadpage() takes two arguments, first your route you&#039;d like to make a get request to. And an optional argument to specify the ID of the element you want the response to go to on your page. 
</p>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:5,&quot;range&quot;:&quot;0-&quot;} --><div class="plugin_wrap"></div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:6,&quot;range&quot;:&quot;0-&quot;} -->
<p>
 is usually the most appropriate element for this. 
</p>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:7,&quot;range&quot;:&quot;0-&quot;} --><div class="wrap_center wrap_round wrap_info plugin_wrap" style="width: 100%;">
<p>
If you don&#039;t specify an ID, loadPage() will look for an element with id = content. I.e. 
</p>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:9,&quot;range&quot;:&quot;0-&quot;} --><div class="plugin_wrap"></div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:10,&quot;range&quot;:&quot;0-&quot;} --></div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:8,&quot;range&quot;:&quot;0-&quot;} -->
<p>
Here&#039;s an example for using loadPage(). I&#039;ll use loadPage() to fetch a loging form. Below I&#039;ll include the route I&#039;m calling. Notice that I&#039;ve included tina4php.js in the head of my file.
</p>
<pre class="file-container-combo file-container-index.twig-combo" data-download-link="true" data-src="file.index.twig">
<code class="language-index.twig file-combo file-index.twig-combo">
&lt;?php
&lt;head&gt; 
 &lt;script type=&quot;text/javascript&quot; src=&quot;/src/public/js/tina4helper.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;button onclick=&quot;loadPage('/login', 'content')&quot;&gt;Login&lt;/button&gt;
&lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</code>
</pre>
<pre class="file-container-combo file-container-/src/routes/admin/index.php-combo" data-download-link="true" data-src="file./src/routes/admin/index.php">
<code class="language-/src/routes/admin/index.php file-combo file-/src/routes/admin/index.php-combo">
\Tina4\Get::add(&quot;/login&quot;, function (\Tina4\Response $response, \Tina4\Request $request){

    return $response (\Tina4\renderTemplate(&quot;screens/login.twig&quot;, [&quot;request&quot; =&gt; $request-&gt;params]), HTTP_OK, TEXT_HTML);
    
});</code>
</pre>

<p>
So behind the scenes loadPage() is using Jquery make a get request to /api/usersâ€œ. Then takes the content of what is returned from the route and inserts it into my 
</p>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:11,&quot;range&quot;:&quot;0-&quot;} --><div class="plugin_wrap"></div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:12,&quot;range&quot;:&quot;0-&quot;} -->
<p>
. All without refreshing the page thanks to Ajax being used behind the scenes. 
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Using loadpage() to load an API route&quot;,&quot;hid&quot;:&quot;using_loadpage_to_load_an_api_route&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;263-1871&quot;} -->
<h2 class="sectionedit13 heading-combo" id="posting_a_form_with_saveform">Posting a form with saveForm()</h2>
<div class="level2">

<p>
saveForm() get&#039;s the names of all the form elements inside the form you specify. The posts the data to the url you specify and adds the return into an element of your choice. 
</p>

<p>
Save form uses Jquery and Ajax to submit your form without reloading the page. This is useful if you want to submit the form without losing the information in the form or rest of your page. This is particularly useful when you want to send back a response from the backend code. 
</p>

<p>
One of the simplest examples is when a user submits information like an email address that passes your validation on the form. But when you check it in the database you notice that the email address already exists. Now you can send back a message and prompt the user to login/reset their password or use a different email address.
</p>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:14,&quot;range&quot;:&quot;0-&quot;} --><div class="wrap_center wrap_round wrap_info plugin_wrap" style="width: 100%;">
<p>
If you don&#039;t specify an ID for the return, saveForm() will look for an element with id = message. I.e. 
</p>
<!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:16,&quot;range&quot;:&quot;0-&quot;} --><div class="plugin_wrap"></div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:17,&quot;range&quot;:&quot;0-&quot;} --></div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:15,&quot;range&quot;:&quot;0-&quot;} --><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_start&quot;,&quot;secid&quot;:18,&quot;range&quot;:&quot;0-&quot;} --><div class="wrap_center wrap_round wrap_tip plugin_wrap" style="width: 100%;">
<p>
Each form should have a form token to prevent CSRF (Cross site request forgery). If you forget to include this your form Tina4 will not allow the form to submit as a security precaution. Tina4 has a built-in Twig extension for this. <a href="/lib/exe/fetch.php?media=tina4:user" class="media mediafile mf_ wikilink2" title="tina4:user"> formToken | raw </a>
</p>
</div><!-- EDIT{&quot;target&quot;:&quot;plugin_wrap_end&quot;,&quot;secid&quot;:19,&quot;range&quot;:&quot;0-&quot;} -->
<p>
Let&#039;s see an example of how this works:
</p>
<pre class="file-container-combo file-container-index.twig-combo" data-download-link="true" data-src="file.index.twig">
<code class="language-index.twig file-combo file-index.twig-combo">
&lt;?php
&lt;head&gt; 
 &lt;script type=&quot;text/javascript&quot; src=&quot;/src/public/js/tina4helper.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;button onclick=&quot;loadPage('/api/users', 'content')&quot;&gt;
&lt;div id=&quot;message&quot;&gt;&lt;/div&gt;

&lt;form id=&quot;user&quot; enctype=&quot;multipart/form-data&quot; xmlns=&quot;http://www.w3.org/1999/html&quot;&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;form-group col-md-6&quot;&gt;
            &lt;label for=&quot;forename&quot;&gt;First Name&lt;/label&gt;
            &lt;input class=&quot;form-control&quot; type=&quot;text&quot; name=&quot;forename&quot; placeholder=&quot;First Name&quot;
                   value=&quot;{{ data.firstName }}&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group col-md-6&quot;&gt;
            &lt;label for=&quot;surname&quot;&gt;Last Name&lt;/label&gt;
            &lt;input class=&quot;form-control&quot; type=&quot;text&quot; name=&quot;surname&quot; placeholder=&quot;Last Name&quot; value=&quot;{{ data.surname }}&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group col-md-12&quot;&gt;
            &lt;label for=&quot;emailAddress&quot;&gt;Email&lt;/label&gt;
            &lt;input class=&quot;form-control&quot; type=&quot;text&quot; name=&quot;emailAddress&quot; placeholder=&quot;Email Address&quot; value=&quot;{{ data.emailAddress }}&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group col-md-6&quot;&gt;
            &lt;label for=&quot;userName&quot;&gt;Username&lt;/label&gt;
            &lt;input class=&quot;form-control&quot; type=&quot;text&quot; name=&quot;userName&quot; placeholder=&quot;Username&quot; value=&quot;{{ data.userName }}&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-group col-md-6&quot;&gt;
            &lt;label for=&quot;password&quot;&gt;Password&lt;/label&gt;
            &lt;input class=&quot;form-control&quot; type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;Password&quot; value=&quot;&quot;&gt;
        &lt;/div&gt;
    {{  &quot;user&quot; | formToken | raw }}
&lt;/form&gt;

&lt;script&gt;
    //Prevent form from reloading the page
    jQuery(document).ready(function() {
        $(&quot;#user&quot;).on().submit(function(e) {
            return false;
        });
    });
&lt;/script&gt;</code>
</pre>

<p>
&lt;/file&gt;
</p>
<pre class="file-container-combo file-container-/src/routes/api/index.php-combo" data-download-link="true" data-src="file./src/routes/api/index.php">
<code class="language-/src/routes/api/index.php file-combo file-/src/routes/api/index.php-combo">
\Tina4\Get::post (&quot;/api/users/login&quot;, function(\Tina4\Response $response, \Tina4\Request $request) {
    
    if ((New Users)-&gt;load(&quot;name = $request-&gt;userName&quot;))
    {
     //User exists in database validate password...
    }

    return $response (HTTP_OK, APPLICATION_JSON);
});</code>
</pre>

<p>
Once the information is returned to your route, you need to decide what to do with it. The form fields will be part of the $request object. You could do validation or store the information or anything else you like at this point.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Posting a form with saveForm()&quot;,&quot;hid&quot;:&quot;posting_a_form_with_saveform&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:13,&quot;range&quot;:&quot;1872-5493&quot;} -->
<h2 class="sectionedit20 heading-combo" id="using_show_message">Using Show Message</h2>
<div class="level2">

<p>
showMessage() is useful if you want to return a message into your page without writing out the markup in your route. 
</p>

<p>
In our example, we have a Bootstrap Alert defined in our Twig template. And when we submit a form, we want to return a message into the alert. 
</p>
<pre class="file-container-combo file-container-login.twig-combo" data-download-link="true" data-src="file.login.twig">
<code class="language-login.twig file-combo file-login.twig-combo">
&lt;div id=&quot;message&quot; class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;/div&gt;</code>
</pre>

<p>
Note how I return just the message without needing to pull any html markup into the route.
</p>
<pre class="file-container-combo file-container-/src/routes/api/index.php-combo" data-download-link="true" data-src="file./src/routes/api/index.php">
<code class="language-/src/routes/api/index.php file-combo file-/src/routes/api/index.php-combo">
\Tina4\Get::post (&quot;/api/users/login&quot;, function(\Tina4\Response $response, \Tina4\Request $request) {
    
    if ((New Users)-&gt;load(&quot;name = $request-&gt;userName&quot;))
    {
     //User exists in database validate password...
    }
    else
    {
        $message = &quot;That user was not found, do you want to &lt;a href=&quot;/signup&quot;&gt;Signup&lt;/a&gt;?&quot;;
    }

    return $response ($users, HTTP_OK, APPLICATION_JSON);
});</code>
</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Using Show Message&quot;,&quot;hid&quot;:&quot;using_show_message&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:20,&quot;range&quot;:&quot;5494-6421&quot;} -->
<h2 class="sectionedit21 heading-combo" id="using_showform">Using showForm()</h2>
<div class="level2">

<p>
showForm() was written to match Crud Router actions. You&#039;d do well to learn both together, as this makes CRUD so simple it will seem almost seamless. 
</p>

<p>
By now, you understand how to submit forms and get responses onto your page.
</p>

<p>
Since Tina4 is a stack and not a framework you&#039;re free to use showForm() outside the scope of CRUD router as well. But you&#039;ll understand the naming of it&#039;s actions better once you&#039;ve learned how CRUD ROUTER works. 
</p>

<p>
I&#039;ll explain the basic flow for using showForm() with CRUD router.
</p>

<p>
showForm(action, loadURL, targetDiv) 
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Using showForm()&quot;,&quot;hid&quot;:&quot;using_showform&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:21,&quot;range&quot;:&quot;6422-7003&quot;} -->
<h3 class="sectionedit22 heading-combo" id="actions">Actions</h3>
<div class="level3">

<p>
<strong>form</strong>
Request type: GET
Route: Should include no Id at the end
The form action is used make a get request to your CRUD route and return a blank form
</p>
<pre class="code-container-combo" data-download-link="true" data-src="file.txt">
<code class="language-txt code-combo">
 showForm('form', /api/users, 'form') </code>
</pre>

<p>
<strong>fetch</strong>
Request type: GET
Route: Includes the ID in the end
Used to return a form with twig variables that can populate data into the form. 
Route
</p>
<pre class="code-container-combo" data-download-link="true" data-src="file.txt">
<code class="language-txt code-combo">
 showForm('fetch', /api/users/213, 'form') </code>
</pre>

<p>
<strong>create</strong>
Request type: POST
Post a form to create a new record. Used to submit the form you&#039;ve requested with the form action. 
</p>
<pre class="code-container-combo" data-download-link="true" data-src="file.txt">
<code class="language-txt code-combo">
 showForm(create, /api/user, 'form') </code>
</pre>

<p>
<strong>edit</strong>
Request type: POST
Post up edited data edit. Used to submit the form you&#039;ve requested with the fetch action.
</p>
<pre class="code-container-combo" data-download-link="true" data-src="file.txt">
<code class="language-txt code-combo">
 showForm('edit', /api/user/453, 'form') </code>
</pre>

<p>
<strong>delete</strong>
Request type: DELETE
Route: Inlcudes the id in the end
Deletes the record with the current ID.
</p>
<pre class="code-container-combo" data-download-link="true" data-src="file.txt">
<code class="language-txt code-combo">
 showForm('delete', /api/user/145, 'form') </code>
</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Actions&quot;,&quot;hid&quot;:&quot;actions&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:22,&quot;range&quot;:&quot;7004-7970&quot;} -->
<h2 class="sectionedit23 heading-combo" id="cookies">Cookies</h2>
<div class="level2">

<p>
You can create or load cookings with the already written js functions for setting and getting cookies easily. 
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Cookies&quot;,&quot;hid&quot;:&quot;cookies&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:23,&quot;range&quot;:&quot;7971-8102&quot;} -->
<h3 class="sectionedit24 heading-combo" id="saving_cookies_with_setcookie">Saving Cookies with setCookie()</h3>
<div class="level3">

<p>
setCookie(name,value,days)
</p>
<pre class="code-container-combo" data-download-link="true" data-src="file.txt">
<code class="language-txt code-combo">
&lt;script&gt;
  setCookie('wishlist',['cookies','cream', 'butter'], 30);
&lt;/script&gt;</code>
</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Saving Cookies with setCookie()&quot;,&quot;hid&quot;:&quot;saving_cookies_with_setcookie&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:24,&quot;range&quot;:&quot;8103-8266&quot;} -->
<h3 class="sectionedit25 heading-combo" id="loading_cookies_with_getcookie">Loading Cookies with getCookie()</h3>
<div class="level3">

<p>
getCookie(name)
</p>
<pre class="code-container-combo" data-download-link="true" data-src="file.txt">
<code class="language-txt code-combo">
&lt;script&gt;
  var $wishlist = getCookie('wishlist');
&lt;/script&gt;</code>
</pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Loading Cookies with getCookie()&quot;,&quot;hid&quot;:&quot;loading_cookies_with_getcookie&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:25,&quot;range&quot;:&quot;8267-&quot;} -->